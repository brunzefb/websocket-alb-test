apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chat
  namespace: prod
  labels:
    helm.sh/chart: chat-0.1.0k
    app.kubernetes.io/name: chat
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=86400
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/inbound-cidrs: 0.0.0.0/0
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:CHANGE_ME
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-port: '8080'

spec:
  ingressClassName: alb
  rules:
  - host: domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: chat
            port:
              number: 80
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: health
            port:
              number: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: chat
  namespace: prod
  labels:
    app.kubernetes.io/name: chat
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.16.0"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 80
      targetPort: ws
      protocol: TCP
      name: ws
  selector:
    app.kubernetes.io/name: chat
    app.kubernetes.io/instance: chat
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat
  namespace: prod
  labels:
    helm.sh/chart: chat-0.1.0
    app.kubernetes.io/name: chat
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chat
      app.kubernetes.io/instance: chat
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chat
        app.kubernetes.io/instance: chat
    spec:
      serviceAccountName: prod
      securityContext:
        {}
      containers:
        - name: chat
          securityContext:
            {}
          image: "$ACCOUNT.dkr.ecr.$REGION.amazonaws.com/websocket-test:v1"  # replace $ACCOUNT and $REGION
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: ws
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources: {}